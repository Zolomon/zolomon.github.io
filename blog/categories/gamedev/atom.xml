<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gamedev | (Neuron => String) => Ethernet]]></title>
  <link href="http://Zolomon.github.io/blog/categories/gamedev/atom.xml" rel="self"/>
  <link href="http://Zolomon.github.io/"/>
  <updated>2013-08-13T08:49:51+02:00</updated>
  <id>http://Zolomon.github.io/</id>
  <author>
    <name><![CDATA[Bengt Ericsson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Artemis - an Entity Component Framework]]></title>
    <link href="http://Zolomon.github.io/blog/2013/08/12/artemis-an-entity-component-framework/"/>
    <updated>2013-08-12T20:04:00+02:00</updated>
    <id>http://Zolomon.github.io/blog/2013/08/12/artemis-an-entity-component-framework</id>
    <content type="html"><![CDATA[<h1>Artemis</h1>

<p>Since a while back I have been reading about entity-component architectures (or, how to utilize data-oriented design) in game development.
What are they? What problems do they solve? These questions are easily answered by watching this:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/16ZF9XqkfRY "></iframe></div></p>

<p>They have more great videos at the <a href="http://www.youtube.com/user/GameEngineArchitects">Game Engine Architecture</a> channel on YouTube.</p>

<p>Basically the features are:
* Use compact data structures which utilizes the computer&rsquo;s caches to decrease stalls in the CPU pipeline.
* Higher flexibility for entity management; create different systems that act isolated on a set of entities based on patterns. [This is incredibly powerful and reminds a lot about the functional paradigm]
* Data-oriented; data exist in the form of content and markup files that the game&rsquo;s factories parse to create the in-game entities. Can basically have hot-swap features in-game to allow art users to get instant visual feedback while rendering. If some data file changes, you update the content in-game at the same time. No need for recompilation.</p>

<ul>
<li><a href="http://gamadu.com/artemis/index.html">http://gamadu.com/artemis/index.html</a> &mdash; the Artemis Framework with ports for most common languages.</li>
<li><a href="https://github.com/thelinuxlich/artemis_CSharp#">https://github.com/thelinuxlich/artemis_CSharp#</a> &mdash; Very nice C# port which I&rsquo;m currently using for a roguelike game in XNA.</li>
</ul>

]]></content>
  </entry>
  
</feed>
